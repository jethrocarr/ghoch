#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ghoch:server');
var http = require('http');
var net = require('net');
var fs = require('fs');
var cluster = require('cluster');



/**
 * Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Setup cluster (multi-process for performance and reliability)
 */

workers = app.get('workers');

if (cluster.isMaster) {
  /**
   * If launched using sockets, we need to handle the existance of any on-disk
   * socket files that might be lingering around. The annoying part is that we
   * need to check if they're active before we blow them away or not.
   */

  if (typeof port === 'string') {
    fs.stat(port, function (err, stats) {
      if (stats) {
        console.log('Removing stale UNIX socket: ' + port);
        fs.unlinkSync(port);
      }
    });
  }


  /**
   * MASTER: Launch slave workers
   */
  console.log('Launching cluster master with '+ workers +' workers');

  for (var i = 0; i < workers; i++) {
    cluster.fork();
  }

  cluster.on('exit', function(worker, code, signal) {
    console.log('worker ' + worker.process.pid + ' died');
  });

} else {

  /**
   * SLAVE: Setup listener
   */

  console.log('Launching slave listener '+ process.pid);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
